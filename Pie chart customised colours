
acilitating quick comparisons. Here, we look into creating pie charts using Matplotlib.


Table of contents
Importance of Pie Charts in Data Visualization
Getting Started with Matplotlib
Installing Matplotlib
Importing Matplotlib
Creating a Basic Pie Chart
Understanding the Data
Plotting a Simple Pie Chart
Customizing Pie Chart Colors
Adding Labels and Percentages
Exploding Slices
Adding a Legend
Saving and Displaying the Chart
Troubleshooting and Tips
Handling Missing or Invalid Data
Dealing with Overlapping Labels
Avoiding Misleading Pie Charts
Enhancing Accessibility and Usability
Conclusion
Importance of Pie Charts in Data Visualization
Pie charts play a crucial role in data visualization for several reasons. Firstly, they provide a visual representation of proportions or percentages, allowing viewers to quickly understand the distribution of data. This makes it easier to identify patterns, trends, or disparities in the data.

Additionally, pie charts are useful for highlighting the relative importance of different categories. By comparing the sizes of the slices, viewers can easily determine which categories are larger or smaller in relation to each other. This can be particularly helpful when presenting data in a concise and visually appealing manner.

Furthermore, pie charts are effective in conveying information to a wide range of audiences. They are intuitive and easy to understand, even for individuals who may not have a strong background in data analysis. This makes pie charts a valuable tool for communicating complex information in a clear and accessible way.

Also Read: 12 Data Plot Types for Visualization from Concept to Code

Getting Started with Matplotlib
Installing Matplotlib
Before you can start using Matplotlib, you need to install it on your system. Installing Matplotlib is a straightforward process. You can use the pip package manager to install it by running the following command in your terminal:

Code:

!pip install matplotlib
Make sure you have Python and pip installed on your system before running this command. Once the installation is complete, you can verify it by importing Matplotlib in your Python script without any errors.

Importing Matplotlib
To use Matplotlib in your Python script, you need to import it first. You can import the pyplot module from Matplotlib, which provides a simple interface for creating and customizing plots. Here’s an example of how to import Matplotlib:

Code:

import matplotlib.pyplot as plt
By convention, Matplotlib is usually imported as `plt` for brevity. This allows you to use shorter function names when creating plots.

Also Read: Matplotlib | Matplotlib For Data Visualization, Exploration

Creating a Basic Pie Chart
Understanding the Data
Before we dive into creating a pie chart using Matplotlib, let’s first understand the data that we will be working with. A pie chart is a circular statistical graphic that is divided into slices to represent different categories or proportions of a whole. Each slice of the pie chart represents a specific category, and the size of the slice corresponds to the proportion of that category in the whole.

In our example, we will create a pie chart to visualize the distribution of sales for different products in a store. We will use a simple dataframe with two columns: “Product” and “Sales”. The “Product” column will contain the names of the products, and the “Sales” column will contain the corresponding sales figures.

Plotting a Simple Pie Chart
To plot a simple pie chart using Matplotlib, we need to import the necessary libraries and create a dataframe with the data we want to visualize. We can then use the `plt.pie()` function to create the pie chart.

Here’s an example code snippet that demonstrates how to create a basic pie chart:

Code:

import matplotlib.pyplot as plt

# Create a dataframe with the data

data = {'Product': ['Product A', 'Product B', 'Product C', 'Product D'],

        'Sales': [350, 450, 300, 600]}

df = pd.DataFrame(data)

# Plot the pie chart

plt.pie(df['Sales'], labels=df['Product'])

plt.show()
Output:

Plotting a Simple Pie Chart
Customizing Pie Chart Colors
To customize the colors of the slices in the pie chart, we can pass a list of colors to the `colors` parameter of the `plt.pie()` function. Each color in the list corresponds to a slice in the pie chart.

Here’s an example code snippet that demonstrates how to customize the colors of a pie chart:

Code:

import matplotlib.pyplot as plt

# Create a dataframe with the data

data = {'Product': ['Product A', 'Product B', 'Product C', 'Product D'],

        'Sales': [350, 450, 300, 600]}

df = pd.DataFrame(data)

# Define custom colors

colors = ['Pink', 'cyan', 'skyblue', 'yellow']

# Plot the pie chart with custom colors

plt.pie(df['Sales'], labels=df['Product'], colors=colors)

plt.show()
Output:

Customizing Pie Chart Colors 
Adding Labels and Percentages
To add labels and percentages to the slices in the pie chart, we can use the `autopct` parameter of the `plt.pie()` function. The `autopct` parameter accepts a format string that specifies how the percentages should be displayed.

Here’s an example code snippet that demonstrates how to add labels and percentages to a pie chart:

Code:

import matplotlib.pyplot as plt

# Create a dataframe with the data

data = {'Product': ['Product A', 'Product B', 'Product C', 'Product D'],

        'Sales': [350, 450, 300, 600]}

df = pd.DataFrame(data)

# Plot the pie chart with labels and percentages

plt.pie(df['Sales'], labels=df['Product'], autopct='%1.1f%%')

plt.show()
Output:

Pie Chart Matplotlib | Adding Labels and Percentages
Exploding Slices
To emphasize a particular slice in the pie chart, we can “explode” it by using the `explode` parameter of the `plt.pie()` function. The `explode` parameter accepts a list of values that specifies the extent to which each slice should be exploded.

Here’s an example code snippet that demonstrates how to explode a slice in a pie chart:

Code:

import matplotlib.pyplot as plt

# Create a dataframe with the data

data = {'Product': ['Product A', 'Product B', 'Product C', 'Product D'],

        'Sales': [350, 450, 300, 600]}

df = pd.DataFrame(data)

# Explode the second slice

explode = [0, 0.1, 0, 0]

# Plot the pie chart with an exploded slice

plt.pie(df['Sales'], labels=df['Product'], explode=explode)

plt.show()
Output:

Pie Chart Matplotlib
Adding a Legend
To add a legend to the pie chart, we can use the `plt.legend()` function. The legend provides a visual representation of the labels in the pie chart.

Here’s an example code snippet that demonstrates how to add a legend to a pie chart:

Code:

import matplotlib.pyplot as plt

# Create a dataframe with the data

data = {'Product': ['Product A', 'Product B', 'Product C', 'Product D'],

        'Sales': [350, 450, 300, 600]}

df = pd.DataFrame(data)

# Plot the pie chart with a legend

plt.pie(df['Sales'], labels=df['Product'])

plt.legend()

plt.show()
Output:

Adding a Legend
Saving and Displaying the Chart
To save the pie chart as an image file, we can use the `plt.savefig()` function. The `plt.savefig()` function accepts a file name and the desired file format as parameters.

Here’s an example code snippet that demonstrates how to save a pie chart as an image file:

Code:

import matplotlib.pyplot as plt

# Create a dataframe with the data

data = {'Product': ['Product A', 'Product B', 'Product C', 'Product D'],

        'Sales': [350, 450, 300, 600]}

df = pd.DataFrame(data)

# Plot the pie chart

plt.pie(df['Sales'], labels=df['Product'])

# Save the pie chart as an image file

plt.savefig('pie_chart.png')

plt.show()
Output:

Saving and Displaying the Chart
Troubleshooting and Tips
Handling Missing or Invalid Data
When creating a pie chart using Matplotlib, it is important to handle missing or invalid data appropriately. If your dataset contains missing values or invalid entries, it can affect the accuracy and reliability of your pie chart.

To handle missing or invalid data, you can use the pandas library in Python to create a DataFrame and clean the data before plotting the pie chart. You can remove any rows or columns with missing values using the dropna() function. Additionally, you can replace invalid entries with appropriate values using the fillna() function.

Here’s an example of how you can handle missing or invalid data:

Code:

import pandas as pd

import matplotlib.pyplot as plt

# Create a DataFrame with missing or invalid data

data = {'Category': ['A', 'B', 'C', 'D'],

        'Value': [10, None, 20, 'Invalid']}

df = pd.DataFrame(data)

# Replace invalid entries with appropriate values

df['Value'] = pd.to_numeric(df['Value'], errors='coerce')

# Drop rows with missing or invalid numeric values

df = df.dropna()

# Plot the pie chart

plt.pie(df['Value'], labels=df['Category'])

plt.show()
Output:

Handling Missing or Invalid Data
By handling missing or invalid data before creating the pie chart, you can ensure that your chart accurately represents the available data.

Dealing with Overlapping Labels
Sometimes, when creating a pie chart with a large number of categories, the labels can overlap and become unreadable. This can make it difficult for viewers to interpret the chart effectively.

To deal with overlapping labels, you can adjust the size and position of the labels using the labeldistance and autopct parameters in the plt.pie() function. The labeldistance parameter controls the distance of the labels from the center of the pie chart, while the autopct parameter specifies the format of the percentage values displayed on the chart.

Here’s an example of how you can deal with overlapping labels:

Code:

import matplotlib.pyplot as plt

# Create a pie chart with overlapping labels

labels = ['Category 1', 'Category 2', 'Category 3', 'Category 4', 'Category 5']

sizes = [20, 30, 10, 15, 25]

# Adjust the size and position of the labels

plt.pie(sizes, labels=labels, labeldistance=1.1, autopct='%1.1f%%')

plt.show()
Output:

Dealing with Overlapping Labels
By adjusting the labeldistance and autopct parameters, you can ensure that the labels in your pie chart are clear and readable.

Avoiding Misleading Pie Charts
Pie charts can sometimes be misleading if not used appropriately. It is important to avoid using pie charts when the data does not represent parts of a whole or when there are too many categories, as it can make the chart difficult to interpret.

To avoid misleading pie charts, consider using other types of charts, such as bar charts or line charts, depending on the nature of your data. These charts can provide a clearer representation of the data and make it easier for viewers to understand the information being presented.

Additionally, ensure that the sizes of the pie slices accurately represent the proportions of the data. You can achieve this by sorting the data in descending order before creating the pie chart.

Enhancing Accessibility and Usability
When creating pie charts, it is important to enhance accessibility and usability for all viewers. Consider the following tips:

Use high contrast colors to ensure that the chart is readable for individuals with visual impairments.
Provide a legend or labels to clearly identify each category in the chart.
Avoid using 3D effects or shadows, as they can make the chart difficult to interpret.
Use appropriate font sizes for the labels to ensure readability.
Test the chart on different devices and screen sizes to ensure that it is responsive and accessible.
By following these tips, you can enhance the accessibility and usability of your pie charts and ensure that they effectively communicate the intended information
**********
I need to draw a pie chart which is having around 20 + different categories and I need to set the colour of every categories properly in pandas made plot and I need to distrib I need to do the distribution for that and is there any alternate of pie chart so that I can you do the visualisation nicely so that my business will impressed with the graphics
ChatGPT said:
ChatGPT
When working with 20+ categories, a pie chart may become cluttered and hard to interpret. You can customize the pie chart colors and explore alternative visualizations for a clearer and more professional presentation.

1. Customizing the Pie Chart
Here’s how to create a pie chart with customized colors for 20+ categories:

Code Example for Pie Chart:
python
Copy code
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Sample data
categories = [f'Category {i}' for i in range(1, 21)]  # 20+ categories
values = [5, 15, 20, 10, 8, 12, 7, 14, 9, 11, 6, 13, 18, 10, 15, 8, 9, 12, 17, 20]

# Create a DataFrame
df = pd.DataFrame({'Category': categories, 'Values': values})

# Define a color palette (20+ distinct colors)
colors = sns.color_palette('tab20', len(categories))  # 'tab20' for 20 distinct colors

# Create pie chart
plt.figure(figsize=(10, 10))
plt.pie(
    df['Values'], 
    labels=df['Category'], 
    colors=colors, 
    autopct='%1.1f%%', 
    startangle=90, 
    textprops={'fontsize': 9}
)

# Add title
plt.title('Distribution of Categories', fontsize=16)

# Display chart
plt.show()
2. Alternatives to Pie Chart
For better visualization of 20+ categories, you might consider alternatives like Bar Charts, Treemaps, or Sunburst Charts.

a) Horizontal Bar Chart
Bar charts are easier to read and interpret when dealing with many categories.

Code Example for Horizontal Bar Chart:
python
Copy code
# Sort values for better visualization
df_sorted = df.sort_values(by='Values', ascending=True)

# Create horizontal bar chart
plt.figure(figsize=(12, 8))
sns.barplot(
    x='Values', 
    y='Category', 
    data=df_sorted, 
    palette='tab20'
)

# Add title and labels
plt.title('Category Distribution', fontsize=16)
plt.xlabel('Values')
plt.ylabel('Category')

# Display chart
plt.show()
b) Treemap
Treemaps are great for visualizing hierarchical data or proportional distributions.

Code Example for Treemap:
python
Copy code
import squarify

# Create treemap
plt.figure(figsize=(12, 8))
squarify.plot(
    sizes=df['Values'], 
    label=df['Category'], 
    color=sns.color_palette('tab20', len(categories)), 
    alpha=0.8
)

# Add title
plt.title('Treemap of Categories', fontsize=16)

# Display chart
plt.axis('off')  # Remove axes
plt.show()
c) Sunburst Chart
A sunburst chart is a circular visualization that is easier to interpret than a pie chart with many categories. Use Plotly for interactive visualizations.

Code Example for Sunburst Chart:
python
Copy code
import plotly.express as px

# Create Sunburst chart
fig = px.sunburst(
    df, 
    path=['Category'], 
    values='Values', 
    color='Values',
    color_continuous_scale='Viridis', 
    title='Sunburst Chart of Categories'
)

# Show chart
fig.show()
Recommendations:
Use Bar Chart or Treemap for static visualizations in Matplotlib.
Use Sunburst Chart with Plotly for an interactive visualization, which can be presented to stakeholders.
Always sort the data or group smaller categories into an "Other" category for better clarity.
These alternatives provide better clarity and visual appeal compared to a cluttered pie chart, making your business insights stand out.


3/3






You said:
But I have to set the colour manually for those 20 + categories
ChatGPT said:
ChatGPT
If you need to manually assign specific colors to each of the 20+ categories in a pie chart or any other chart, you can explicitly define the colors and pass them to the plotting function.

Steps to Set Colors Manually:
Create a list of custom colors.
Map these colors to your categories.
Use the colors parameter in your plotting function.
Example: Manually Set Colors in a Pie Chart
Code:
python
Copy code
import pandas as pd
import matplotlib.pyplot as plt

# Sample data
categories = [f'Category {i}' for i in range(1, 21)]
values = [5, 15, 20, 10, 8, 12, 7, 14, 9, 11, 6, 13, 18, 10, 15, 8, 9, 12, 17, 20]

# Create a DataFrame
df = pd.DataFrame({'Category': categories, 'Values': values})

# Manually assign colors (20 distinct colors)
manual_colors = [
    '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', 
    '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf',
    '#aec7e8', '#ffbb78', '#98df8a', '#ff9896', '#c5b0d5',
    '#c49c94', '#f7b6d2', '#c7c7c7', '#dbdb8d', '#9edae5'
]

# Create pie chart with manually assigned colors
plt.figure(figsize=(10, 10))
plt.pie(
    df['Values'],
    labels=df['Category'],
    colors=manual_colors,  # Assign custom colors
    autopct='%1.1f%%',
    startangle=90,
    textprops={'fontsize': 9}
)

# Add title
plt.title('Distribution of Categories with Custom Colors', fontsize=16)

# Display chart
plt.show()
Example: Bar Chart with Manually Set Colors
Code:
python
Copy code
import seaborn as sns

# Sort the DataFrame for better visualization
df_sorted = df.sort_values(by='Values', ascending=True)

# Create horizontal bar chart
plt.figure(figsize=(12, 8))
bars = plt.barh(
    df_sorted['Category'],
    df_sorted['Values'],
    color=manual_colors[:len(df_sorted)]  # Assign custom colors
)

# Add title and labels
plt.title('Category Distribution with Custom Colors', fontsize=16)
plt.xlabel('Values')
plt.ylabel('Category')

# Display chart
plt.show()
Key Points:
Custom Colors:

Define a list of hex color codes or named colors.
Assign them to the colors parameter in the chart.
Manual Mapping:

Ensure that the number of colors matches the number of categories.
Use Case:

Pie Chart: Use the colors parameter in plt.pie().
Bar Chart: Pass the color list to the color argument in plt.bar() or plt.barh().
Recommendations:
Use tools like Color Brewer (https://colorbrewer2.org/) to generate harmonious color schemes.
Avoid overwhelming stakeholders with too many bright or similar shades—choose a palette that is visually distinct and professional.





You said:
I don't understand the code for colour can you please give me the list of all the colours with code so that I can choose properly
ChatGPT said:
ChatGPT
Here’s a list of color names with their corresponding hex codes to help you choose colors for your chart manually. You can use these colors by specifying their hex codes in your code.

Common Colors with Hex Codes
Color Name	Hex Code	Preview
Black	#000000	
White	#FFFFFF	
Red	#FF0000	
Green	#008000	
Blue	#0000FF	
Yellow	#FFFF00	
Cyan	#00FFFF	
Magenta	#FF00FF	
Orange	#FFA500	
Purple	#800080	
Gray	#808080	
Pink	#FFC0CB	
Brown	#A52A2A	
Teal	#008080	
Navy	#000080	
Extended Colors for 20+ Categories
Here’s a curated list of 20+ distinct colors with their hex codes to use in charts:

Color Name	Hex Code	Preview
Light Blue	#ADD8E6	
Light Green	#90EE90	
Coral	#FF7F50	
Gold	#FFD700	
Lavender	#E6E6FA	
Lime	#00FF00	
Indigo	#4B0082	
Dark Orange	#FF8C00	
Sky Blue	#87CEEB	
Olive	#808000	
Maroon	#800000	
Salmon	#FA8072	
Light Coral	#F08080	
Dark Cyan	#008B8B	
Turquoise	#40E0D0	
Tomato	#FF6347	
Orchid	#DA70D6	
Khaki	#F0E68C	
Plum	#DDA0DD	
Crimson	#DC143C	
How to Use:
Choose Colors:

Pick colors from the list above that match your needs.
Ensure that adjacent slices or bars use visually distinct colors.
Assign Colors in Code:

python
Copy code
manual_colors = [
    '#ADD8E6', '#90EE90', '#FF7F50', '#FFD700', '#E6E6FA',
    '#00FF00', '#4B0082', '#FF8C00', '#87CEEB', '#808000',
    '#800000', '#FA8072', '#F08080', '#008B8B', '#40E0D0',
    '#FF6347', '#DA70D6', '#F0E68C', '#DDA0DD', '#DC143C'
]
Pass Colors to Plotting Function:

python
Copy code
plt.pie(values, labels=categories, colors=manual_colors, autopct='%1.1f%%')
Tip:
If you are unsure which colors work best together:

Use Color Brewer (https://colorbrewer2.org/) for color palettes.
Use Matplotlib’s predefined palettes, such as tab20 or Set3:
python
Copy code
colors = sns.color_palette('tab20', len(categories))

2/2






You said:
What is the best graphics for visualisation for pie chart and alternate of pie chart to show the distribution in 20 + different categories matte plot
ChatGPT said:
ChatGPT
When you have 20+ categories, a pie chart can become cluttered and hard to interpret. Alternate visualization methods can better represent the data while maintaining clarity. Below are some effective visualization options, along with why they might work better than a pie chart for your case:

1. Alternatives to Pie Chart for Distribution
1.1 Bar Chart (Horizontal or Vertical)
Why?
It shows the exact values and proportions clearly.
Easier to compare across categories, especially with many categories.
Implementation:
python
Copy code
import matplotlib.pyplot as plt

# Example data
categories = [f'Category {i}' for i in range(1, 21)]
values = [5, 15, 20, 10, 8, 12, 7, 14, 9, 11, 6, 13, 18, 10, 15, 8, 9, 12, 17, 20]

# Horizontal bar chart
plt.figure(figsize=(12, 8))
plt.barh(categories, values, color=plt.cm.tab20.colors)
plt.xlabel('Values')
plt.title('Distribution of Categories - Horizontal Bar Chart')
plt.show()
1.2 Treemap
Why?
Uses space efficiently, making it easier to display a large number of categories.
Size and color of blocks convey proportions visually.
Implementation (using squarify library):
python
Copy code
import squarify

# Example data
plt.figure(figsize=(12, 8))
squarify.plot(
    sizes=values,
    label=categories,
    color=plt.cm.tab20.colors,
    alpha=0.8
)
plt.title('Treemap of Categories')
plt.axis('off')
plt.show()
1.3 Heatmap
Why?
Useful if you want to see patterns or relationships in category proportions.
Implementation (using seaborn):
python
Copy code
import seaborn as sns
import pandas as pd

# Example data
df = pd.DataFrame({'Category': categories, 'Values': values})

# Create a pivot table for heatmap
heatmap_data = df.pivot_table(index='Category', values='Values')

plt.figure(figsize=(10, 12))
sns.heatmap(heatmap_data, annot=True, cmap='coolwarm', fmt='.0f', cbar=True)
plt.title('Heatmap of Category Distribution')
plt.show()
1.4 Donut Chart
Why?
A variation of the pie chart but less cluttered.
Leaves a center space for additional data or text.
Implementation:
python
Copy code
plt.figure(figsize=(10, 10))
wedges, texts, autotexts = plt.pie(
    values,
    labels=categories,
    autopct='%1.1f%%',
    startangle=140,
    colors=plt.cm.tab20.colors
)
plt.gca().add_artist(plt.Circle((0, 0), 0.70, fc='white'))
plt.title('Distribution of Categories - Donut Chart')
plt.show()
1.5 Lollipop Chart
Why?
Combines a bar chart with markers, making it visually appealing and easier to interpret.
Implementation:
python
Copy code
plt.figure(figsize=(12, 8))
plt.stem(categories, values, linefmt="grey", markerfmt="o", basefmt=" ")
plt.xticks(rotation=90)
plt.title('Lollipop Chart for Category Distribution')
plt.xlabel('Categories')
plt.ylabel('Values')
plt.show()
2. Pie Chart Improvement
If you must use a pie chart, consider these enhancements:

Group smaller categories into "Other".
Use a donut chart (as shown above) for better aesthetics.
Rotate the chart for better label visibility.
Assign distinct, meaningful colors to categories.
Recommendations
Best for Proportions: Use Treemap for its compact and clear representation.
Best for Exact Values: Use Horizontal Bar Chart.
Best for Aesthetic Appeal: Use Donut Chart or Lollipop Chart.
For Heatmaps or Relationships: Use Heatmap.
Would you like detailed code examples for specific charts?


2/2






You said:
Yes 
ChatGPT said:
ChatGPT
Here are detailed code examples for each recommended chart with your scenario of having 20+ categories.

1. Horizontal Bar Chart
Purpose: Clearly compare the values of 20+ categories.

python
Copy code
import matplotlib.pyplot as plt

# Example data
categories = [f'Category {i}' for i in range(1, 21)]
values = [5, 15, 20, 10, 8, 12, 7, 14, 9, 11, 6, 13, 18, 10, 15, 8, 9, 12, 17, 20]

# Horizontal bar chart
plt.figure(figsize=(12, 8))
plt.barh(categories, values, color=plt.cm.tab20.colors)
plt.xlabel('Values')
plt.ylabel('Categories')
plt.title('Horizontal Bar Chart for 20+ Categories')
plt.gca().invert_yaxis()  # Optional: Invert for better visual order
plt.show()
2. Treemap
Purpose: Displays proportions compactly, making better use of space.

python
Copy code
import squarify

# Example data
plt.figure(figsize=(12, 8))
squarify.plot(
    sizes=values,
    label=categories,
    color=plt.cm.tab20.colors,
    alpha=0.8
)
plt.title('Treemap for Category Distribution')
plt.axis('off')  # Removes axes for cleaner look
plt.show()
3. Heatmap
Purpose: Highlights patterns in category proportions.

python
Copy code
import seaborn as sns
import pandas as pd

# Example data
df = pd.DataFrame({'Category': categories, 'Values': values})

# Heatmap using a pivot table
heatmap_data = df.pivot_table(index='Category', values='Values')

plt.figure(figsize=(10, 12))
sns.heatmap(heatmap_data, annot=True, cmap='coolwarm', fmt='.0f', cbar=True)
plt.title('Heatmap for Category Distribution')
plt.show()
4. Donut Chart
Purpose: A more visually appealing variation of a pie chart.

python
Copy code
plt.figure(figsize=(10, 10))
wedges, texts, autotexts = plt.pie(
    values,
    labels=categories,
    autopct='%1.1f%%',
    startangle=140,
    colors=plt.cm.tab20.colors
)
# Add a white circle to create the "donut" effect
plt.gca().add_artist(plt.Circle((0, 0), 0.70, fc='white'))
plt.title('Donut Chart for Category Distribution')
plt.show()
5. Lollipop Chart
Purpose: Combines a bar chart with markers for a cleaner look.

python
Copy code
plt.figure(figsize=(12, 8))
plt.stem(categories, values, linefmt="grey", markerfmt="o", basefmt=" ")
plt.xticks(rotation=90)
plt.xlabel('Categories')
plt.ylabel('Values')
plt.title('Lollipop Chart for Category Distribution')
plt.tight_layout()
plt.show()
6. Enhanced Pie Chart with Labels
Purpose: Display category values and percentages together.

python
Copy code
# Example data
plt.figure(figsize=(12, 12))
wedges, texts, autotexts = plt.pie(
    values,
    labels=categories,
    autopct=lambda pct: f'{pct:.1f}%\n({(pct/100)*sum(values):.1f})',
    startangle=140,
    colors=plt.cm.tab20.colors
)
plt.setp(autotexts, size=9, weight="bold")
plt.title('Enhanced Pie Chart for Category Distribution')
plt.show()
Suggestions for Color Customization
If you want to manually set specific colors, create a list of 20+ colors using a tool like ColorBrewer, or choose from Matplotlib's colormap library. Example:

python
Copy code
# Manual color setting
colors = [
    '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2',
    '#7f7f7f', '#bcbd22', '#17becf', '#393b79', '#5254a3', '#6b6ecf', '#9c9ede',
    '#637939', '#8ca252', '#b5cf6b', '#cedb9c', '#8c6d31', '#bd9e39'
]

# Applying these colors to any chart
plt.barh(categories, values, color=colors)
Would you like further assistance, such as applying these to real data or tweaking styles for presentation?


2/2






You said:
Again for every category distribution I need to set the colour manually so that for the next graph the colour should not change randomly
ChatGPT said:
ChatGPT
To manually set the color for every category in your plot, you can specify a list of colors corresponding to the categories. By doing this, the color for each category will remain consistent across all your plots.

Below is a complete approach where you define a list of specific colors for each of your categories and then apply them to your charts. This ensures that the color for each category remains the same across different visualizations.

Example: Setting Manual Colors for 20+ Categories
python
Copy code
import matplotlib.pyplot as plt

# Example data
categories = [f'Category {i}' for i in range(1, 21)]
values = [5, 15, 20, 10, 8, 12, 7, 14, 9, 11, 6, 13, 18, 10, 15, 8, 9, 12, 17, 20]

# Manually defined colors for each category (you can define more if needed)
manual_colors = [
    '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2',
    '#7f7f7f', '#bcbd22', '#17becf', '#393b79', '#5254a3', '#6b6ecf', '#9c9ede',
    '#637939', '#8ca252', '#b5cf6b', '#cedb9c', '#8c6d31', '#bd9e39'
]

# Horizontal Bar Chart
plt.figure(figsize=(12, 8))
plt.barh(categories, values, color=manual_colors)
plt.xlabel('Values')
plt.ylabel('Categories')
plt.title('Horizontal Bar Chart for 20+ Categories with Manual Colors')
plt.gca().invert_yaxis()  # Optional: Invert for better visual order
plt.show()

# Donut Chart
plt.figure(figsize=(10, 10))
wedges, texts, autotexts = plt.pie(
    values,
    labels=categories,
    autopct='%1.1f%%',
    startangle=140,
    colors=manual_colors
)
plt.gca().add_artist(plt.Circle((0, 0), 0.70, fc='white'))  # Create donut effect
plt.title('Donut Chart for Category Distribution with Manual Colors')
plt.show()

# Treemap (Using the same manual color list)
import squarify

plt.figure(figsize=(12, 8))
squarify.plot(
    sizes=values,
    label=categories,
    color=manual_colors,
    alpha=0.8
)
plt.title('Treemap for Category Distribution with Manual Colors')
plt.axis('off')
plt.show()
Explanation:
manual_colors: This list contains the exact color codes for each of your 20 categories. You can add or adjust these colors based on your preferences.
Consistency: By using the same color list (manual_colors) across all charts, you ensure that each category is consistently represented by the same color across multiple visualizations.
Donut Chart: A variation of the pie chart that keeps the center empty for better readability. Colors will remain consistent.
Treemap: Used here for compactly showing proportions, ensuring colors are consistent.
Other Charts:
You can use the manual_colors list for any chart you create, such as Lollipop Chart, Bar Chart, etc., ensuring that the colors for each category do not change across plots.

Let me know if you'd like more specific examples or adjustments for your use case!


2/2






You said:
Yeah code
ChatGPT said:
ChatGPT
Here is the complete code with manual color assignment for various types of visualizations like Horizontal Bar Chart, Donut Chart, and Treemap, ensuring that the colors remain consistent across all of them.

python
Copy code
import matplotlib.pyplot as plt
import squarify

# Example data
categories = [f'Category {i}' for i in range(1, 21)]
values = [5, 15, 20, 10, 8, 12, 7, 14, 9, 11, 6, 13, 18, 10, 15, 8, 9, 12, 17, 20]

# Manually defined colors for each category
manual_colors = [
    '#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2',
    '#7f7f7f', '#bcbd22', '#17becf', '#393b79', '#5254a3', '#6b6ecf', '#9c9ede',
    '#637939', '#8ca252', '#b5cf6b', '#cedb9c', '#8c6d31', '#bd9e39'
]

# Horizontal Bar Chart
plt.figure(figsize=(12, 8))
plt.barh(categories, values, color=manual_colors)
plt.xlabel('Values')
plt.ylabel('Categories')
plt.title('Horizontal Bar Chart for 20+ Categories with Manual Colors')
plt.gca().invert_yaxis()  # Optional: Invert for better visual order
plt.show()

# Donut Chart
plt.figure(figsize=(10, 10))
wedges, texts, autotexts = plt.pie(
    values,
    labels=categories,
    autopct='%1.1f%%',
    startangle=140,
    colors=manual_colors
)
plt.gca().add_artist(plt.Circle((0, 0), 0.70, fc='white'))  # Create donut effect
plt.title('Donut Chart for Category Distribution with Manual Colors')
plt.show()

# Treemap (Using the same manual color list)
plt.figure(figsize=(12, 8))
squarify.plot(
    sizes=values,
    label=categories,
    color=manual_colors,
    alpha=0.8
)
plt.title('Treemap for Category Distribution with Manual Colors')
plt.axis('off')
plt.show()

# Lollipop Chart
plt.figure(figsize=(12, 8))
plt.stem(categories, values, linefmt="grey", markerfmt="o", basefmt=" ")
plt.xticks(rotation=90)
plt.xlabel('Categories')
plt.ylabel('Values')
plt.title('Lollipop Chart for Category Distributio
